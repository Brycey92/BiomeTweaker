buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.0-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'java'
apply plugin: 'maven'
sourceCompatibility = 1.7
targetCompatibility = 1.7

sourceSets.main{
    java{
        srcDirs = ['src/main/java']
    }
    resources{
        srcDirs = ['src/main/resources']
    }
}

ext.configFile = file "build.properties"

configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = config.mod_version
group= "me.superckl.biometweaker"
archivesBaseName = "BiomeTweaker"

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    mappings = "stable_18"

    replaceIn "reference/ModData.java"
    replace "@VERSION@", "${config.mod_version}.${System.env.BUILD_NUMBER ?: 0}"
    replace "@FINGERPRINT@", "${System.env.sha1_fingerprint ?: "N/A"}"

    replaceIn "biometweaker/APIInfo.java"
    replace "@APIVERSION@", "${config.api_version}.${System.env.BUILD_NUMBER ?: 0}"

    replaceIn "superscript/APIInfo.java"
    replace "@SSVERSION@", "${config.ss_version}.${System.env.BUILD_NUMBER ?: 0}"

    runDir = "eclipse"
}

version = "${config.minecraft_version}-${config.mod_version}.${System.getenv("BUILD_NUMBER") ?: 0}"

dependencies {
    compile "org.projectlombok:lombok:1.16.6"
}

processResources
{
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand([
        'mod_version': project.config.mod_version,
        'minecraft_version': project.config.minecraft_version,
        ])
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
}

task apiJar(type: Jar, dependsOn: 'sourceMainJava') {
    from ('build/sources/java') {
        include "**/api/**/*"
    }
    version = "${config.minecraft_version}-API-${project.config.api_version}.${System.getenv("BUILD_NUMBER") ?: 0}"
    extension = 'zip'
}

task ssJar(type: Jar, dependsOn: 'sourceMainJava') {
    from ('build/sources/java') {
        include "**/api/superscript/**/"
    }
    version = "${config.minecraft_version}-SSAPI-${project.config.ss_version}.${System.getenv("BUILD_NUMBER") ?: 0}"
    extension = 'zip'
}

artifacts {
	archives apiJar
  archives ssJar
}

jar {
    manifest {
        attributes 'FMLCorePlugin': 'me.superckl.biometweaker.core.BiomeTweakerCore'
        attributes 'FMLCorePluginContainsFMLMod': 'true'
        attributes 'FMLAT': 'biometweaker_at.cfg'
    }
}

tasks.build.dependsOn('signJar')

ext.keystore_location = "${System.env.keystore_location ?: "."}"
ext.keystore_password = "${System.env.keystore_password ?: ""}"
ext.keystore_alias = "${System.env.keystore_alias ?: ""}"

task signJar(dependsOn: ["reobfJar"]) {
    inputs.dir jar.destinationDir
    inputs.file keystore_location
    inputs.property "keystore_alias", keystore_alias
    inputs.property "keystore_password", keystore_password
    outputs.dir jar.destinationDir

    // only sign if the keystore exists
    onlyIf {
        return keystore_location != "." && keystore_password != ""
    }
    // the actual action.. sign the jar.
    doLast {
        jar.destinationDir.eachFile { file ->
            if (!file.getPath().endsWith(".${System.env.BUILD_NUMBER ?: 0}.jar"))
                return; // skip non-jars

            logger.lifecycle "signing $file"
            ant.signjar(
                    destDir: file.getParentFile(), // same place it came from
                    jar: file,
                    keystore: keystore_location,
                    alias: keystore_alias,
                    storepass: keystore_password
            )
        }
    }
}
